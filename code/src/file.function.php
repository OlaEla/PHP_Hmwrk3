<?php

// function readAllFunction(string $address) : string {

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ª—é–¥–µ–π —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–º –¥–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è
function checkBirthdaysFunction(array $config): string {
    $address = $config['storage']['address'];

    if (!file_exists($address) || !is_readable($address)) {
        return handleError("–§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —á—Ç–µ–Ω–∏—è");
    }

    $fileContents = file($address, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);
    $today = date('d-m'); // –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î-–ú–ú
    $found = false;
    $result = "";

    foreach ($fileContents as $line) {
        $data = explode(', ', $line);
        if (count($data) == 2) {
            $name = $data[0];
            $birthDate = $data[1];
            $birthDayMonth = substr($birthDate, 0, 5);

            if ($birthDayMonth === $today) {
                $result .= "$name –ø—Ä–∞–∑–¥–Ω—É–µ—Ç –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è! üéâ\n";
                $found = true;
            }
        }
    }

    if (!$found) {
        $result = "–°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è.\n";
    }

    return $result;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ –ø–æ –∏–º–µ–Ω–∏ –∏–ª–∏ –¥–∞—Ç–µ
function deleteLineFunction(array $config): string {
    $address = $config['storage']['address'];

    if (!file_exists($address) || !is_readable($address)) {
        return handleError("–§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —á—Ç–µ–Ω–∏—è");
    }

    $fileContents = file($address, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);
    $searchTerm = readline("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–ª–∏ –¥–∞—Ç—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ");
    $found = false;
    $newContents = [];

    foreach ($fileContents as $line) {
        if (strpos($line, $searchTerm) === false) {
            $newContents[] = $line;
        } else {
            $found = true;
        }
    }

    if ($found) {
        file_put_contents($address, implode(PHP_EOL, $newContents) . PHP_EOL);
        return "–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.\n";
    } else {
        return "–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n";
    }
}

function readAllFunction(array $config) : string {
    $address = $config['storage']['address'];

    if (file_exists($address) && is_readable($address)) {
        $file = fopen($address, "rb");
        
        $contents = ''; 
    
        while (!feof($file)) {
            $contents .= fread($file, 100);
        }
        
        fclose($file);
        return $contents;
    }
    else {
        return handleError("–§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
    }
}

// function addFunction(string $address) : string {
/*function addFunction(array $config) : string {
    $address = $config['storage']['address'];

    $name = readline("–í–≤–µ–¥–∏—Ç–µ –∏–º—è: ");
    $date = readline("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î-–ú–ú-–ì–ì–ì–ì: ");
    $data = $name . ", " . $date . "\r\n";

    $fileHandler = fopen($address, 'a');

    if(fwrite($fileHandler, $data)){
        return "–ó–∞–ø–∏—Å—å $data –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ñ–∞–π–ª $address"; 
    }
    else {
        return handleError("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏. –î–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã");
    }

    fclose($fileHandler);
}*/

// –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª
function addFunction(array $config): string {
    $address = $config['storage']['address'];


    $name = readline("–í–≤–µ–¥–∏—Ç–µ –∏–º—è: ");
    $date = readline("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î-–ú–ú-–ì–ì–ì–ì: ");


    if (validateName($name) && validateDate($date)) {
        $data = $name . ", " . $date . "\r\n";


        $fileHandler = fopen($address, 'a');

        if (fwrite($fileHandler, $data)) {
            return "–ó–∞–ø–∏—Å—å \"$data\" –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ñ–∞–π–ª $address\n";
        } else {
            return handleError("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏. –î–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.");
        }

        fclose($fileHandler);
    } else {
        return handleError("–í–≤–µ–¥–µ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–º—è –∏ –¥–∞—Ç—É.");
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–º–µ–Ω–∏
function validateName(string $name): bool {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∏–º—è –Ω–µ –ø—É—Å—Ç–æ–µ –∏ —Å–æ—Å—Ç–æ–∏—Ç —Ç–æ–ª—å–∫–æ –∏–∑ –±—É–∫–≤, –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –¥–µ—Ñ–∏—Å–æ–≤
    if (empty(trim($name))) {
        return false; // –ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º
    }

    if (!preg_match("/^[–∞-—è–ê-–Ø—ë–Å\- ]+$/u", $name)) {
        return false; // –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ—Ñ–∏—Å
    }

    return true;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞—Ç—ã
function validateDate(string $date): bool {
    // –†–∞–∑–±–∏–≤–∞–µ–º –¥–∞—Ç—É –Ω–∞ –¥–µ–Ω—å, –º–µ—Å—è—Ü –∏ –≥–æ–¥
    $dateBlocks = explode("-", $date);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –î–î-–ú–ú-–ì–ì–ì–ì
    if (count($dateBlocks) != 3 || strlen($dateBlocks[2]) != 4) {
        return false;
    }

    // –ü—Ä–∏–≤–æ–¥–∏–º —á–∞—Å—Ç–∏ –¥–∞—Ç—ã –∫ —á–∏—Å–ª–æ–≤–æ–º—É —Ç–∏–ø—É
    $day = (int)$dateBlocks[0];
    $month = (int)$dateBlocks[1];
    $year = (int)$dateBlocks[2];

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã
    if (!checkdate($month, $day, $year)) {
        return false;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≥–æ–¥ –Ω–µ –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ
    if ($year > date('Y')) {
        return false;
    }

    return true;
}

// function clearFunction(string $address) : string {
function clearFunction(array $config) : string {
    $address = $config['storage']['address'];

    if (file_exists($address) && is_readable($address)) {
        $file = fopen($address, "w");
        
        fwrite($file, '');
        
        fclose($file);
        return "–§–∞–π–ª –æ—á–∏—â–µ–Ω";
    }
    else {
        return handleError("–§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
    }
}

function helpFunction() {
    return handleHelp();
}

function readConfig(string $configAddress): array|false{
    return parse_ini_file($configAddress, true);
}

function readProfilesDirectory(array $config): string {
    $profilesDirectoryAddress = $config['profiles']['address'];

    if(!is_dir($profilesDirectoryAddress)){
        mkdir($profilesDirectoryAddress);
    }

    $files = scandir($profilesDirectoryAddress);

    $result = "";

    if(count($files) > 2){
        foreach($files as $file){
            if(in_array($file, ['.', '..']))
                continue;
            
            $result .= $file . "\r\n";
        }
    }
    else {
        $result .= "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞ \r\n";
    }

    return $result;
}

function readProfile(array $config): string {
    $profilesDirectoryAddress = $config['profiles']['address'];

    if(!isset($_SERVER['argv'][2])){
        return handleError("–ù–µ —É–∫–∞–∑–∞–Ω —Ñ–∞–π–ª –ø—Ä–æ—Ñ–∏–ª—è");
    }

    $profileFileName = $profilesDirectoryAddress . $_SERVER['argv'][2] . ".json";

    if(!file_exists($profileFileName)){
        return handleError("–§–∞–π–ª $profileFileName –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
    }

    $contentJson = file_get_contents($profileFileName);
    $contentArray = json_decode($contentJson, true);

    $info = "–ò–º—è: " . $contentArray['name'] . "\r\n";
    $info .= "–§–∞–º–∏–ª–∏—è: " . $contentArray['lastname'] . "\r\n";

    return $info;
}